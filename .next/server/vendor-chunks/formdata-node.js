"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/formdata-node";
exports.ids = ["vendor-chunks/formdata-node"];
exports.modules = {

/***/ "(rsc)/./node_modules/formdata-node/lib/form-data.cjs":
/*!******************************************************!*\
  !*** ./node_modules/formdata-node/lib/form-data.cjs ***!
  \******************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Blob: () => Blob,\n  File: () => File,\n  FormData: () => FormData\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/isFunction.ts\nvar isFunction = (value) => typeof value === \"function\";\n\n// src/isObject.ts\nvar isObject = (value) => typeof value === \"object\" && value != null && !Array.isArray(value);\n\n// src/isAsyncIterable.ts\nvar isAsyncIterable = (value) => isObject(value) && isFunction(value[Symbol.asyncIterator]);\n\n// src/blobHelpers.ts\nvar MAX_CHUNK_SIZE = 65536;\nasync function* clonePart(value) {\n  if (value.byteLength <= MAX_CHUNK_SIZE) {\n    yield value;\n    return;\n  }\n  let offset = 0;\n  while (offset < value.byteLength) {\n    const size = Math.min(value.byteLength - offset, MAX_CHUNK_SIZE);\n    const buffer = value.buffer.slice(offset, offset + size);\n    offset += buffer.byteLength;\n    yield new Uint8Array(buffer);\n  }\n}\nasync function* readStream(readable) {\n  const reader = readable.getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      break;\n    }\n    yield value;\n  }\n}\nasync function* chunkStream(stream) {\n  for await (const value of stream) {\n    yield* clonePart(value);\n  }\n}\nvar getStreamIterator = (source) => {\n  if (isAsyncIterable(source)) {\n    return chunkStream(source);\n  }\n  if (isFunction(source.getReader)) {\n    return chunkStream(readStream(source));\n  }\n  throw new TypeError(\n    \"Unsupported data source: Expected either ReadableStream or async iterable.\"\n  );\n};\nasync function* consumeNodeBlob(blob) {\n  let position = 0;\n  while (position !== blob.size) {\n    const chunk = blob.slice(\n      position,\n      Math.min(blob.size, position + MAX_CHUNK_SIZE)\n    );\n    const buffer = await chunk.arrayBuffer();\n    position += buffer.byteLength;\n    yield new Uint8Array(buffer);\n  }\n}\nasync function* consumeBlobParts(parts, clone = false) {\n  for (const part of parts) {\n    if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        yield* clonePart(part);\n      } else {\n        yield part;\n      }\n    } else if (isFunction(part.stream)) {\n      yield* getStreamIterator(part.stream());\n    } else {\n      yield* consumeNodeBlob(part);\n    }\n  }\n}\nfunction* sliceBlob(blobParts, blobSize, start = 0, end) {\n  end ??= blobSize;\n  let relativeStart = start < 0 ? Math.max(blobSize + start, 0) : Math.min(start, blobSize);\n  let relativeEnd = end < 0 ? Math.max(blobSize + end, 0) : Math.min(end, blobSize);\n  const span = Math.max(relativeEnd - relativeStart, 0);\n  let added = 0;\n  for (const part of blobParts) {\n    if (added >= span) {\n      break;\n    }\n    const partSize = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n    if (relativeStart && partSize <= relativeStart) {\n      relativeStart -= partSize;\n      relativeEnd -= partSize;\n    } else {\n      let chunk;\n      if (ArrayBuffer.isView(part)) {\n        chunk = part.subarray(relativeStart, Math.min(partSize, relativeEnd));\n        added += chunk.byteLength;\n      } else {\n        chunk = part.slice(relativeStart, Math.min(partSize, relativeEnd));\n        added += chunk.size;\n      }\n      relativeEnd -= partSize;\n      relativeStart = 0;\n      yield chunk;\n    }\n  }\n}\n\n// src/Blob.ts\nvar _parts, _type, _size;\nvar _Blob = class _Blob {\n  /**\n   * Returns a new [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) object.\n   * The content of the blob consists of the concatenation of the values given in the parameter array.\n   *\n   * @param blobParts An `Array` strings, or [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), [`ArrayBufferView`](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView), [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) objects, or a mix of any of such objects, that will be put inside the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\n   * @param options An optional object of type `BlobPropertyBag`.\n   */\n  constructor(blobParts = [], options = {}) {\n    /**\n     * An `Array` of [`ArrayBufferView`](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) or [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) objects, or a mix of any of such objects, that will be put inside the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\n     */\n    __privateAdd(this, _parts, []);\n    /**\n     * Returns the [`MIME type`](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type) of the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File).\n     */\n    __privateAdd(this, _type, \"\");\n    /**\n     * Returns the size of the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) in bytes.\n     */\n    __privateAdd(this, _size, 0);\n    options ??= {};\n    if (typeof blobParts !== \"object\" || blobParts === null) {\n      throw new TypeError(\n        \"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\"\n      );\n    }\n    if (!isFunction(blobParts[Symbol.iterator])) {\n      throw new TypeError(\n        \"Failed to construct 'Blob': The object must have a callable @@iterator property.\"\n      );\n    }\n    if (typeof options !== \"object\" && !isFunction(options)) {\n      throw new TypeError(\n        \"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\"\n      );\n    }\n    const encoder = new TextEncoder();\n    for (const raw of blobParts) {\n      let part;\n      if (ArrayBuffer.isView(raw)) {\n        part = new Uint8Array(raw.buffer.slice(\n          raw.byteOffset,\n          raw.byteOffset + raw.byteLength\n        ));\n      } else if (raw instanceof ArrayBuffer) {\n        part = new Uint8Array(raw.slice(0));\n      } else if (raw instanceof _Blob) {\n        part = raw;\n      } else {\n        part = encoder.encode(String(raw));\n      }\n      __privateSet(this, _size, __privateGet(this, _size) + (ArrayBuffer.isView(part) ? part.byteLength : part.size));\n      __privateGet(this, _parts).push(part);\n    }\n    const type = options.type === void 0 ? \"\" : String(options.type);\n    __privateSet(this, _type, /^[\\x20-\\x7E]*$/.test(type) ? type : \"\");\n  }\n  static [Symbol.hasInstance](value) {\n    return Boolean(\n      value && typeof value === \"object\" && isFunction(value.constructor) && (isFunction(value.stream) || isFunction(value.arrayBuffer)) && /^(Blob|File)$/.test(value[Symbol.toStringTag])\n    );\n  }\n  /**\n   * Returns the [`MIME type`](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type) of the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   */\n  get type() {\n    return __privateGet(this, _type);\n  }\n  /**\n   * Returns the size of the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) in bytes.\n   */\n  get size() {\n    return __privateGet(this, _size);\n  }\n  /**\n   * Creates and returns a new [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) object which contains data from a subset of the blob on which it's called.\n   *\n   * @param start An index into the Blob indicating the first byte to include in the new Blob. If you specify a negative value, it's treated as an offset from the end of the Blob toward the beginning. For example, -10 would be the 10th from last byte in the Blob. The default value is 0. If you specify a value for start that is larger than the size of the source Blob, the returned Blob has size 0 and contains no data.\n   * @param end An index into the Blob indicating the first byte that will *not* be included in the new Blob (i.e. the byte exactly at this index is not included). If you specify a negative value, it's treated as an offset from the end of the Blob toward the beginning. For example, -10 would be the 10th from last byte in the Blob. The default value is size.\n   * @param contentType The content type to assign to the new Blob; this will be the value of its type property. The default value is an empty string.\n   */\n  slice(start, end, contentType) {\n    return new _Blob(sliceBlob(__privateGet(this, _parts), this.size, start, end), {\n      type: contentType\n    });\n  }\n  /**\n   * Returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that resolves with a string containing the contents of the blob, interpreted as UTF-8.\n   */\n  async text() {\n    const decoder = new TextDecoder();\n    let result = \"\";\n    for await (const chunk of consumeBlobParts(__privateGet(this, _parts))) {\n      result += decoder.decode(chunk, { stream: true });\n    }\n    result += decoder.decode();\n    return result;\n  }\n  /**\n   * Returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that resolves with the contents of the blob as binary data contained in an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer).\n   */\n  async arrayBuffer() {\n    const view = new Uint8Array(this.size);\n    let offset = 0;\n    for await (const chunk of consumeBlobParts(__privateGet(this, _parts))) {\n      view.set(chunk, offset);\n      offset += chunk.length;\n    }\n    return view.buffer;\n  }\n  /**\n   * Returns a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) which upon reading returns the data contained within the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\n   */\n  stream() {\n    const iterator = consumeBlobParts(__privateGet(this, _parts), true);\n    return new ReadableStream({\n      async pull(controller) {\n        const { value, done } = await iterator.next();\n        if (done) {\n          return queueMicrotask(() => controller.close());\n        }\n        controller.enqueue(value);\n      },\n      async cancel() {\n        await iterator.return();\n      }\n    });\n  }\n  get [Symbol.toStringTag]() {\n    return \"Blob\";\n  }\n};\n_parts = new WeakMap();\n_type = new WeakMap();\n_size = new WeakMap();\nvar Blob = _Blob;\nObject.defineProperties(Blob.prototype, {\n  type: { enumerable: true },\n  size: { enumerable: true },\n  slice: { enumerable: true },\n  stream: { enumerable: true },\n  text: { enumerable: true },\n  arrayBuffer: { enumerable: true }\n});\n\n// src/isBlob.ts\nvar isBlob = (value) => value instanceof Blob;\n\n// src/File.ts\nvar _name, _lastModified;\nvar File = class extends Blob {\n  /**\n   * Creates a new File instance.\n   *\n   * @param fileBits An `Array` strings, or [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), [`ArrayBufferView`](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView), [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) objects, or a mix of any of such objects, that will be put inside the [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   * @param name The name of the file.\n   * @param options An options object containing optional attributes for the file.\n   */\n  constructor(fileBits, name, options = {}) {\n    super(fileBits, options);\n    /**\n     * Returns the name of the file referenced by the File object.\n     */\n    __privateAdd(this, _name, void 0);\n    /**\n     * The last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight). Files without a known last modified date return the current date.\n     */\n    __privateAdd(this, _lastModified, 0);\n    if (arguments.length < 2) {\n      throw new TypeError(\n        `Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`\n      );\n    }\n    __privateSet(this, _name, String(name));\n    const lastModified = options.lastModified === void 0 ? Date.now() : Number(options.lastModified);\n    if (!Number.isNaN(lastModified)) {\n      __privateSet(this, _lastModified, lastModified);\n    }\n  }\n  static [Symbol.hasInstance](value) {\n    return value instanceof Blob && value[Symbol.toStringTag] === \"File\" && typeof value.name === \"string\";\n  }\n  /**\n   * Name of the file referenced by the File object.\n   */\n  get name() {\n    return __privateGet(this, _name);\n  }\n  /* c8 ignore next 3 */\n  get webkitRelativePath() {\n    return \"\";\n  }\n  /**\n   * The last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight). Files without a known last modified date return the current date.\n   */\n  get lastModified() {\n    return __privateGet(this, _lastModified);\n  }\n  get [Symbol.toStringTag]() {\n    return \"File\";\n  }\n};\n_name = new WeakMap();\n_lastModified = new WeakMap();\n\n// src/isFile.ts\nvar isFile = (value) => value instanceof File;\n\n// src/FormData.ts\nvar _entries, _setEntry, setEntry_fn;\nvar FormData = class {\n  constructor() {\n    __privateAdd(this, _setEntry);\n    /**\n     * Stores internal data for every entry\n     */\n    __privateAdd(this, _entries, /* @__PURE__ */ new Map());\n  }\n  static [Symbol.hasInstance](value) {\n    if (!value) {\n      return false;\n    }\n    const val = value;\n    return Boolean(\n      isFunction(val.constructor) && val[Symbol.toStringTag] === \"FormData\" && isFunction(val.append) && isFunction(val.set) && isFunction(val.get) && isFunction(val.getAll) && isFunction(val.has) && isFunction(val.delete) && isFunction(val.entries) && isFunction(val.values) && isFunction(val.keys) && isFunction(val[Symbol.iterator]) && isFunction(val.forEach)\n    );\n  }\n  /**\n   * Appends a new value onto an existing key inside a FormData object,\n   * or adds the key if it does not already exist.\n   *\n   * The difference between `set()` and `append()` is that if the specified key already exists, `set()` will overwrite all existing values with the new one, whereas `append()` will append the new value onto the end of the existing set of values.\n   *\n   * @param name The name of the field whose data is contained in `value`.\n   * @param value The field's value. This can be [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n    or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File). If none of these are specified the value is converted to a string.\n   * @param fileName The filename reported to the server, when a Blob or File is passed as the second parameter. The default filename for Blob objects is \"blob\". The default filename for File objects is the file's filename.\n   */\n  append(name, value, fileName) {\n    __privateMethod(this, _setEntry, setEntry_fn).call(this, {\n      name,\n      fileName,\n      append: true,\n      rawValue: value,\n      argsLength: arguments.length\n    });\n  }\n  /**\n   * Set a new value for an existing key inside FormData,\n   * or add the new field if it does not already exist.\n   *\n   * @param name The name of the field whose data is contained in `value`.\n   * @param value The field's value. This can be [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n    or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File). If none of these are specified the value is converted to a string.\n   * @param fileName The filename reported to the server, when a Blob or File is passed as the second parameter. The default filename for Blob objects is \"blob\". The default filename for File objects is the file's filename.\n   *\n   */\n  set(name, value, fileName) {\n    __privateMethod(this, _setEntry, setEntry_fn).call(this, {\n      name,\n      fileName,\n      append: false,\n      rawValue: value,\n      argsLength: arguments.length\n    });\n  }\n  /**\n   * Returns the first value associated with a given key from within a `FormData` object.\n   * If you expect multiple values and want all of them, use the `getAll()` method instead.\n   *\n   * @param {string} name A name of the value you want to retrieve.\n   *\n   * @returns A `FormDataEntryValue` containing the value. If the key doesn't exist, the method returns null.\n   */\n  get(name) {\n    const field = __privateGet(this, _entries).get(String(name));\n    if (!field) {\n      return null;\n    }\n    return field[0];\n  }\n  /**\n   * Returns all the values associated with a given key from within a `FormData` object.\n   *\n   * @param {string} name A name of the value you want to retrieve.\n   *\n   * @returns An array of `FormDataEntryValue` whose key matches the value passed in the `name` parameter. If the key doesn't exist, the method returns an empty list.\n   */\n  getAll(name) {\n    const field = __privateGet(this, _entries).get(String(name));\n    if (!field) {\n      return [];\n    }\n    return field.slice();\n  }\n  /**\n   * Returns a boolean stating whether a `FormData` object contains a certain key.\n   *\n   * @param name A string representing the name of the key you want to test for.\n   *\n   * @return A boolean value.\n   */\n  has(name) {\n    return __privateGet(this, _entries).has(String(name));\n  }\n  /**\n   * Deletes a key and its value(s) from a `FormData` object.\n   *\n   * @param name The name of the key you want to delete.\n   */\n  delete(name) {\n    __privateGet(this, _entries).delete(String(name));\n  }\n  /**\n   * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through all keys contained in this `FormData` object.\n   * Each key is a `string`.\n   */\n  *keys() {\n    for (const key of __privateGet(this, _entries).keys()) {\n      yield key;\n    }\n  }\n  /**\n   * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through the `FormData` key/value pairs.\n   * The key of each pair is a string; the value is a [`FormDataValue`](https://developer.mozilla.org/en-US/docs/Web/API/FormDataEntryValue).\n   */\n  *entries() {\n    for (const name of this.keys()) {\n      const values = this.getAll(name);\n      for (const value of values) {\n        yield [name, value];\n      }\n    }\n  }\n  /**\n   * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through all values contained in this object `FormData` object.\n   * Each value is a [`FormDataValue`](https://developer.mozilla.org/en-US/docs/Web/API/FormDataEntryValue).\n   */\n  *values() {\n    for (const [, value] of this) {\n      yield value;\n    }\n  }\n  /**\n   * An alias for FormData#entries()\n   */\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /**\n   * Executes given callback function for each field of the FormData instance\n   */\n  forEach(callback, thisArg) {\n    for (const [name, value] of this) {\n      callback.call(thisArg, value, name, this);\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return \"FormData\";\n  }\n};\n_entries = new WeakMap();\n_setEntry = new WeakSet();\nsetEntry_fn = function({\n  name,\n  rawValue,\n  append,\n  fileName,\n  argsLength\n}) {\n  const methodName = append ? \"append\" : \"set\";\n  if (argsLength < 2) {\n    throw new TypeError(\n      `Failed to execute '${methodName}' on 'FormData': 2 arguments required, but only ${argsLength} present.`\n    );\n  }\n  name = String(name);\n  let value;\n  if (isFile(rawValue)) {\n    value = fileName === void 0 ? rawValue : new File([rawValue], fileName, {\n      // otherwise, create new File with given fileName\n      type: rawValue.type,\n      lastModified: rawValue.lastModified\n    });\n  } else if (isBlob(rawValue)) {\n    value = new File([rawValue], fileName === void 0 ? \"blob\" : fileName, {\n      type: rawValue.type\n    });\n  } else if (fileName) {\n    throw new TypeError(\n      `Failed to execute '${methodName}' on 'FormData': parameter 2 is not of type 'Blob'.`\n    );\n  } else {\n    value = String(rawValue);\n  }\n  const values = __privateGet(this, _entries).get(name);\n  if (!values) {\n    return void __privateGet(this, _entries).set(name, [value]);\n  }\n  if (!append) {\n    return void __privateGet(this, _entries).set(name, [value]);\n  }\n  values.push(value);\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n/*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/formdata-node/lib/form-data.cjs\n");

/***/ })

};
;